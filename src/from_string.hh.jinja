// autogenerated

#pragma once

#include "enum_spec.hh"

{% for enum in enums %}

{% set n_fields = enum.fields | length %}
{% set full_name = enum.namespace + '::' + enum.name if enum.namespace else enum.name %}

// spec definition for {{ full_name }}

template<>
struct enum_spec<{{ full_name }}> {
    using enum {{ full_name }};

    static constexpr std::string_view name = "{{ enum.name }}";
    static constexpr size_t n_members = {{ n_fields }};
    static constexpr std::array<std::pair<std::string_view, {{ full_name }}>, {{ n_fields }}> members = { {
        {% for f in enum.fields -%}
            {"{{ f }}", {{ f }} },
        {% endfor -%}
    } };
};


{% if enum.namespace %}
namespace {{ enum.namespace }} {

{% endif %}

{% if enum.namespace %}

}  // namespace {{ enum.namespace }}
{% endif %}
{% endfor %}
